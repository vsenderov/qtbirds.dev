/**
 * @file A Simulator for QT-Birds Data
 * @author Viktor Senderov
 * 
 * PREREQUISITES
 * 
 * If needed install and activate npm and node:
 * 
 *   nvm install-latest-npm
 *   nvm install node
 *   nvm use node
 * 
 * REQUIRED PACKAGES
 * 
 *   - itself
 *   - https://www.npmjs.com/package/fasta2json
 *   - webppl-fs
 *   - TODO phyjs - to process phylogenetic trees
 * 
 * USAGE
 * 
 *   webppl qtbirds-sim.wppl --require fasta2json --require . --require webppl-fs --\ 
 *                           FILE.fasta RATES.json CHARACTERS.json
 * 
 * Produces 100 samples of Q-T-Birds data, formated as JSON.
 * 
 *   FILE.fasta - starting genetic sequence at the root
 *   RATE.json - initial rate values at the root
 *   CHARACTERS.json - possible character states
 * 
 */

var nucleotides = ["a", "c", "g", "t"]  // TODO Validate vs AGCT encoding
var fasta = fasta2json.ReadFasta(argv["_"][1])
var startNucSeq = fasta[0].seq // TODO potential issue with multiple sequences
var startStateSeq = map( 
  function(element) { nucleotides.indexOf(element) },
  startNucSeq
)

var rates = JSON.parse(fs.read(argv["_"][2]))
var lam = rates.lam
var mu = rates.mu
var nu = rates.nu
var time = rates.time

var characters = JSON.parse(fs.read(argv["_"][3]))
var startingCharState = characters.characters.indexOf(characters.startingCharacter)
var nChar = characters.characters.length

// Simplest model
var Q = jc69()

// HKY
//var Q = hky85([0.1, 0.1, 0.4, 0.4], 1)

// Transition probability matrix is computed from the instantenous rate matrix
var P = transition_probabilities(Q)

// Possible next states, hard-coded
var nextStates = [ [1, 2, 3],
                   [0, 2, 3],
                   [0, 1, 3],
                   [0, 1, 2] ]


// Character transitions
var QChar = mymod_character(nChar)
var PChar = transition_probabilities_n(QChar)
var nextStatesChar = possible_next_states(nChar)

var model = function() {
  var evRes = evolve2(
     lam,
     mu,
     nu,
     time,
     startStateSeq,
     Q,
     P,
     nextStates,
     startingCharState,
     QChar,
     PChar,
     nextStatesChar
   )

  var toNucs = function(s) {
    return nucleotides[s]
  }
  
  return {
    endSeq: map(toNucs, evRes.endStates).join(''), 
    endChar: characters.characters[evRes.endCharState]
  }
}

var dist = Infer({
   method: 'SMC',
    particles: 100,
    model: model
 })

JSON.stringify(dist.samples)
 // // Expected that var(correlated trait ) ~= 10*var(independent trait)
